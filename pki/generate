#!/usr/bin/env ruby

require 'base64'
require 'open3'
require 'yaml'

require_relative 'certs'
require_relative 'metadata'
require_relative 'proxy-node-metadata'
require_relative 'truststores'
require_relative 'utils'
require_relative 'options'

options = Parser.parse(ARGV)
output_dir = ARGV.pop || abort(USAGE)

SCRIPT_DIR = File.expand_path(File.dirname(__FILE__))
PROXY_NODE_MANIFEST = File.join(SCRIPT_DIR, 'proxy_node_manifest.yml')
STUB_IDP_MANIFEST = File.join(SCRIPT_DIR, 'stub_idp_manifest.yml')
SECRET = File.join(SCRIPT_DIR, 'secret.yaml')

puts <<-EOS
ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º  ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º    ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º    ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º  
ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º   ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º   ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º    ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º  ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º 
ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º  ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º    ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º        ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º 
ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º  ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º   ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º 
ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º        ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º  ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º    ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º    ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º  ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º 
ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º        ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º   ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º   ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º    ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º  ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º 
ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º        ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º    ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º     ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º    ðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡ºðŸ‡ªðŸ‡º  


EOS

def sub(common_name)
  "/C=UK/O=Verify/OU=Notification/CN=#{common_name}"
end

def selfsigned_keypair(cn)
  puts("Generating self-signed CA cert - #{sub(cn)}")
  ss_key = create_key
  ss_cert = create_certificate(ss_key, sub(cn)).tap do |cert|
    ca_certificate(cert)
    sign_certificate(cert, ss_key)
  end
  KeyPair.new(ss_key, ss_cert)
end

def sub_keypair(issuer_keypair, cn, key_usage)
  puts("Issuing cert - #{sub(cn)} from #{issuer_keypair.cert.subject}")
  sub_key = create_key
  sub_cert = create_certificate(sub_key, sub(cn)).tap do |cert|
    issue_certificate(cert, issuer_keypair.cert, key_usage)
    sign_certificate(cert, issuer_keypair.key)
  end
  KeyPair.new(sub_key, sub_cert)
end

def der2pk8(der)
  stdout, status = Open3.capture2('openssl pkcs8 -inform DER -topk8 -outform DER -nocrypt', stdin_data: der)
  stdout
end

def der2p8(der)
  stdout, status = Open3.capture2('openssl pkcs8 -topk8 -inform DER -outform PEM -nocrypt', stdin_data: der)
  stdout
end

def b64(s)
  strip_pem(Base64.encode64(s))
end

# Root CA
root_keypair = selfsigned_keypair('Root CA')

#Â Verify Hub Metadata Signing
hub_meta_keypair = sub_keypair(root_keypair, 'Hub Metadata Signing', USAGE_SIGNING)

#Â eIDAS Proxy Metadata Signing
proxy_node_meta_keypair = sub_keypair(root_keypair, 'Proxy Node Metadata Signing', USAGE_SIGNING)

# Hub Signing
hub_signing_keypair = sub_keypair(root_keypair, 'Hub Signing', USAGE_SIGNING)

# Hub Encryption
hub_encryption_keypair = sub_keypair(root_keypair, 'Hub Encryption', USAGE_ENCRYPTION)

# Stub IDP Signing
idp_signing_keypair = sub_keypair(root_keypair, 'IDP Signing', USAGE_SIGNING)

# Proxy Node Signing
proxy_signing_keypair = sub_keypair(root_keypair, 'Proxy Node Signing', USAGE_SIGNING)

# Stub Connector Signing
stub_connector_signing_keypair = sub_keypair(root_keypair, 'Stub Connector Signing', USAGE_SIGNING)

# Stub Connector Encryption
stub_connector_encryption_keypair = sub_keypair(root_keypair, 'Stub Connector Encryption', USAGE_ENCRYPTION)

#Â Generate Hub Metadata for Proxy Node
hub_config_for_proxy_node = {
  'id' => 'VERIFY-HUB',
  'entity_id' => options.idp_entity_id,
  'assertion_consumer_service_uri' => "#{options.proxy_url}/SAML2/SSO/Response/POST",
  'organization' => { 'name' => 'Hub', 'display_name' => 'Hub', 'url' => 'https://dev-hub.local' },
  'signing_certificates' => [
    { 'name' => 'hub_signing', 'x509' => strip_pem(idp_signing_keypair.cert.to_pem) }
  ],
  'encryption_certificate' => { 'name' => 'hub_encryption', 'x509' => strip_pem(hub_encryption_keypair.cert.to_pem) }
}
stub_idp_config_for_proxy_node = {
  'id' => 'stub-idp-demo',
  'entity_id' => options.idp_entity_id,
  'sso_uri' => "#{options.idp_url}/SAML2/SSO",
  'organization' => { 'name' => 'stub-idp-demo', 'display_name' => 'Stub IDP', 'url' => options.idp_url },
  'signing_certificates' => [
    { 'x509' => strip_pem(idp_signing_keypair.cert.to_pem) }
  ],
  'enabled' => true
}
hub_metadata_for_proxy_node_xml = generate_hub_metadata(hub_config_for_proxy_node, [stub_idp_config_for_proxy_node], root_keypair.cert)
hub_metadata_for_proxy_node_xml_signed = sign_metadata(hub_metadata_for_proxy_node_xml, hub_meta_keypair, options.xmlsectool_path)

#Â Generate Hub Metadata for Stub IDP
hub_config_for_idp = {
    'id' => 'VERIFY-HUB',
    'entity_id' => options.hub_entity_id,
    'assertion_consumer_service_uri' => "#{options.proxy_url}/SAML2/SSO/Response/POST",
    'organization' => { 'name' => 'Hub', 'display_name' => 'Hub', 'url' => 'https://dev-hub.local' },
    'signing_certificates' => [
        { 'name' => 'hub_signing', 'x509' => strip_pem(hub_signing_keypair.cert.to_pem) }
    ],
    'encryption_certificate' => { 'name' => 'hub_encryption', 'x509' => strip_pem(hub_encryption_keypair.cert.to_pem) }
}

stub_idp_config = {
    'id' => 'stub-idp-demo',
    'entity_id' => options.hub_entity_id,
    'sso_uri' => "#{options.idp_url}/SAML2/SSO",
    'organization' => { 'name' => 'stub-idp-demo', 'display_name' => 'Stub IDP', 'url' => options.idp_url },
    'signing_certificates' => [
        { 'x509' => strip_pem(hub_signing_keypair.cert.to_pem) }
    ],
    'enabled' => true
}
hub_metadata_for_stub_idp_xml = generate_hub_metadata(hub_config_for_idp, [stub_idp_config], root_keypair.cert)
hub_metadata_for_stub_idp_xml_signed = sign_metadata(hub_metadata_for_stub_idp_xml, hub_meta_keypair, options.xmlsectool_path)

# Generate Proxy Node Metadata
proxy_node_config = {
  'id' => '_entities',
  'entity_id' => options.proxy_entity_id,
  'sso_uri' => "#{options.proxy_url}/SAML2/SSO/POST",
  'organization' => { 'name' => 'eIDAS Service', 'display_name' => 'eIDAS Service', 'url' => options.proxy_url },
  'signing_certificates' => [
    { 'x509' => strip_pem(proxy_signing_keypair.cert.to_pem) }
  ],
  'enabled' => true
}
proxy_node_metadata_xml = generate_proxy_node_metadata('dev', proxy_node_config, root_keypair.cert)
proxy_node_metadata_xml_signed = sign_metadata(proxy_node_metadata_xml, proxy_node_meta_keypair, options.xmlsectool_path)

# Output
Dir.mkdir(output_dir) unless Dir.exist?(output_dir)
Dir.chdir(output_dir) do
  create_truststore('ida_metadata_truststore.ts', options.truststore_pass, {'root_ca' => root_keypair.cert})

  create_file('hub_metadata_for_proxy_node.xml', hub_metadata_for_proxy_node_xml_signed)
  create_file('hub_metadata_for_idp.xml', hub_metadata_for_stub_idp_xml_signed)
  create_file('metadata_for_connector_node.xml', proxy_node_metadata_xml_signed)

  metadata_truststore = File.open('ida_metadata_truststore.ts', 'rb').read

  proxy_node_vars = {
    'HUB_ENTITY_ID' => options.hub_entity_id,
    'HUB_URL' => "#{options.idp_url}/SAML2/SSO",
    'SIGNING_CERT' => b64(proxy_signing_keypair.cert.to_pem),
    'SIGNING_KEY' => b64(der2pk8(proxy_signing_keypair.key.to_der)),
    'SIGNING_PRIVATE_KEY_SOFTHSM' => b64(der2p8(proxy_signing_keypair.key.to_der)),
    'HUB_FACING_SIGNING_CERT' => b64(hub_signing_keypair.cert.to_pem),
    'HUB_FACING_SIGNING_KEY' => b64(der2pk8(hub_signing_keypair.key.to_der)),
    'HUB_FACING_ENCRYPTION_CERT' => b64(hub_encryption_keypair.cert.to_pem),
    'HUB_FACING_ENCRYPTION_KEY' => b64(der2pk8(hub_encryption_keypair.key.to_der)),
    'HUB_METADATA_TRUSTSTORE' => b64(metadata_truststore),
    'HUB_METADATA_TRUSTSTORE_PASSWORD' => options.truststore_pass,
    'CONNECTOR_NODE_METADATA_TRUSTSTORE' => b64(metadata_truststore),
    'CONNECTOR_NODE_METADATA_TRUSTSTORE_PASSWORD' => options.truststore_pass,
    'CONNECTOR_NODE_ENTITY_ID' => "#{options.connector_url}/Metadata",
    'CONNECTOR_NODE_ISSUER_ID' => "#{options.connector_url}/Metadata",
    'CONNECTOR_NODE_URL' => "#{options.connector_url}/SAML2/Response/POST",
    'PROXY_NODE_RESPONSE_ENDPOINT' => "#{options.proxy_url}/SAML2/SSO/Response/POST",
    'PROXY_NODE_AUTHN_REQUEST_ENDPOINT' => "#{options.proxy_url}/SAML2/SSO/POST",
  }

  stub_connector_vars = {
    'PROXY_NODE_ENTITY_ID' => options.proxy_entity_id,
    'SIGNING_CERT' => b64(stub_connector_signing_keypair.cert.to_pem),
    'SIGNING_KEY' => b64(der2pk8(stub_connector_signing_keypair.key.to_der)),
    'ENCRYPTION_CERT' => b64(stub_connector_encryption_keypair.cert.to_pem),
    'ENCRYPTION_KEY' => b64(der2pk8(stub_connector_encryption_keypair.key.to_der)),
    'PROXY_NODE_METADATA_TRUSTSTORE' => b64(metadata_truststore),
    'PROXY_NODE_METADATA_TRUSTSTORE_PASSWORD' => options.truststore_pass,
    'CONNECTOR_NODE_BASE_URL' => options.connector_url,
  }

  stub_idp_vars = {
    'ENTITY_ID' => options.idp_entity_id,
    'METADATA_ENTITY_ID' => options.hub_entity_id,
    'STUB_IDP_SIGNING_PRIVATE_KEY' => b64(der2pk8(idp_signing_keypair.key.to_der)),
    'STUB_IDP_SIGNING_CERT' => b64(idp_signing_keypair.cert.to_pem),
    'STUB_COUNTRY_SIGNING_PRIVATE_KEY' => b64(der2pk8(idp_signing_keypair.key.to_der)),
    'STUB_COUNTRY_SIGNING_CERT' => b64(idp_signing_keypair.cert.to_pem),
    'METADATA_TRUSTSTORE' => b64(metadata_truststore),
    'METADATA_TRUSTSTORE_PASSWORD' => options.truststore_pass,
  }

  vsp_vars = {
    'LOG_LEVEL' => 'INFO',
    'CLOCK_SKEW' => 'PT30s',
    'SERVICE_ENTITY_IDS' => "[\"http://verify-service-provider/\"]",
    'VERIFY_ENVIRONMENT' => 'COMPLIANCE_TOOL',
    'SSO_LOCATION' => "#{options.idp_url}/SAML2/SSO/",
    'HUB_METADATA_ENTITY_ID' => options.idp_entity_id,
    'TRUST_STORE' => b64(metadata_truststore),
    'TRUST_STORE_PASSWORD' => options.truststore_pass,
    'HUB_TRUST_STORE' => b64(metadata_truststore),
    'HUB_TRUST_STORE_PASSWORD' => options.truststore_pass,
    'IDP_TRUST_STORE' => b64(metadata_truststore),
    'IDP_TRUST_STORE_PASSWORD' => options.truststore_pass,
    'SAML_SIGNING_KEY' => b64(der2pk8(hub_signing_keypair.key.to_der)),
    'SAML_PRIMARY_ENCRYPTION_KEY' => b64(der2pk8(hub_encryption_keypair.key.to_der)),
    'SAML_SECONDARY_ENCRYPTION_KEY' => b64(der2pk8(hub_encryption_keypair.key.to_der)),
  }

  if options.do_files
    puts('Generating PKI files')
    create_file('root_ca.crt', root_keypair.cert.to_pem)
    create_file('hub_metadata_signing.crt', hub_meta_keypair.cert.to_pem)
    create_file('proxy_node_metadata_signing.crt', proxy_node_meta_keypair.cert.to_pem)

    create_file('hub_signing.crt', hub_signing_keypair.cert.to_pem)
    create_file('hub_signing.der', hub_signing_keypair.key.to_der)
    create_file('hub_encryption.crt', hub_encryption_keypair.cert.to_pem)
    create_file('hub_encryption.der', hub_encryption_keypair.key.to_der)
    create_file('stub_idp_signing.crt', idp_signing_keypair.cert.to_pem)
    create_file('stub_idp_signing.der', idp_signing_keypair.key.to_der)
    create_file('proxy_node_signing.crt', proxy_signing_keypair.cert.to_pem)
    create_file('proxy_node_signing.der', proxy_signing_keypair.key.to_der)
    create_file('stub_connector_signing.crt', stub_connector_signing_keypair.cert.to_pem)
    create_file('stub_connector_signing.der', stub_connector_signing_keypair.key.to_der)

    create_file('hub_signing.pk8', der2pk8(hub_signing_keypair.key.to_der))
    create_file('hub_encryption.pk8', der2pk8(hub_encryption_keypair.key.to_der))
    create_file('stub_idp_signing.pk8', der2pk8(idp_signing_keypair.key.to_der))
    create_file('proxy_node_signing.pk8', der2pk8(proxy_signing_keypair.key.to_der))
    create_file('stub_connector_signing.pk8', der2pk8(stub_connector_signing_keypair.key.to_der))
    create_file('stub_connector_encryption.pk8', der2pk8(stub_connector_encryption_keypair.key.to_der))
  end

  if options.softhsm
      puts('Creating proxy_node_signing files for softhsm testing...')
      create_file('proxy_node_signing.crt', proxy_signing_keypair.cert.to_pem)
      create_file('proxy_node_signing.pk8', der2pk8(proxy_signing_keypair.key.to_der))
      create_file('proxy_node_signing.p8', der2p8(proxy_signing_keypair.key.to_der))
  end

  if options.do_manifests
    proxy_node_manifest = YAML.load_file(PROXY_NODE_MANIFEST).tap do |cfg|
      cfg['applications'][0]['env'].update(proxy_node_vars)
    end

    stub_idp_manifest = YAML.load_file(STUB_IDP_MANIFEST).tap do |cfg|
      cfg['applications'][0]['env'].update(stub_idp_vars)
    end

    puts('Generating manifests')
    create_file('proxy_node.manifest.yml', YAML.dump(proxy_node_manifest))
    create_file('stub_idp.manifest.yml', YAML.dump(stub_idp_manifest))
  end

  if options.do_secrets
    secret = YAML.load_file(SECRET).tap do |cfg|
      cfg['metadata']['name'] = 'proxy-node-pki'
      cfg['data'] = proxy_node_vars.inject({}) { |vars, (key, value)| vars[key] = b64(value); vars }
    end
    create_file('proxy-node-secret.yaml', YAML.dump(secret))

    secret = YAML.load_file(SECRET).tap do |cfg|
      cfg['metadata']['name'] = 'stub-connector-pki'
      cfg['data'] = stub_connector_vars.inject({}) { |vars, (key, value)| vars[key] = b64(value); vars }
    end
    create_file('stub-connector-secret.yaml', YAML.dump(secret))

    secret = YAML.load_file(SECRET).tap do |cfg|
      cfg['metadata']['name'] = 'stub-idp-pki'
      cfg['data'] = stub_idp_vars.inject({}) { |vars, (key, value)| vars[key] = b64(value); vars }
    end
    create_file('stub-idp-secret.yaml', YAML.dump(secret))

    secret = YAML.load_file(SECRET).tap do |cfg|
      cfg['metadata']['name'] = 'saml-metadata'
      cfg['data'] = {}
      cfg['data']['hub_metadata_for_proxy_node.xml'] = b64(hub_metadata_for_proxy_node_xml_signed)
      cfg['data']['hub_metadata_for_idp.xml'] = b64(hub_metadata_for_stub_idp_xml_signed)
      cfg['data']['metadata_for_connector_node.xml'] = b64(proxy_node_metadata_xml_signed)
    end
    create_file('metadata-secret.yaml', YAML.dump(secret))

    secret = YAML.load_file(SECRET).tap do |cfg|
      cfg['metadata']['name'] = 'verify-service-provider'
      cfg['data'] = vsp_vars.inject({}) { |vars, (key, value)| vars[key] = b64(value); vars }
    end
    create_file('verify-service-provider-secret.yaml', YAML.dump(secret))
  end

  if options.do_env
    puts('Generating environment files')
    create_file('proxy_node.env', proxy_node_vars.map { |k,v| "#{k}=#{v}\n" }.join)
    create_file('stub_connector.env', stub_connector_vars.map { |k,v| "#{k}=#{v}\n" }.join)
    create_file('stub_idp.env', stub_idp_vars.map { |k,v| "#{k}=#{v}\n" }.join)
  end
end


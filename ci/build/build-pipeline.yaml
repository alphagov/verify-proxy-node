apiVersion: concourse.govsvc.uk/v1beta1
kind: Pipeline
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: build-release
spec:
  exposed: true
  config:

    github_source: &github_source
      uri: https://github.com/alphagov/verify-proxy-node.git
      organization: alphagov
      owner: alphagov
      repository: verify-proxy-node
      branch: master
      github_api_token: ((github.api-token))
      access_token: ((github.api-token))
      approvers: ((trusted-developers.github-accounts))
      required_approval_count: 2

    image_put_params: &image_put_params
      image: image/image.tar
      additional_tags: src/.git/short_ref

    task_toolbox: &task_toolbox
      type: docker-image
      source:
        repository: ((concourse.task-toolbox-image))
        tag: ((concourse.task-toolbox-tag))

    gradle_cache_path: &gradle_cache_path
      path: home/gradle/.gradle

    openjdk_image: &openjdk_image
      type: docker-image
      source:
        repository: amazoncorretto
        tag: 11

    build_config: &build_config
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: vito/oci-build-task
        version:
          digest: sha256:cfb2983956145f54a4996c2aff5fc598856c8722922a6e73f9ebfa3d9b3f9813
      caches:
      - path: cache
      run:
        path: build

    resource_types:

    - name: github
      type: registry-image
      source:
        repository: ((concourse.github-resource-image))
        tag: ((concourse.github-resource-tag))

    resources:

    - name: src
      type: github
      icon: github-circle
      source:
        <<: *github_source
        ignore_paths: [cloudhsm, proxy-node-vsp-config, ci]

    - name: vsp-src
      icon: github-circle
      type: git
      source:
        uri: https://github.com/alphagov/verify-service-provider.git
        branch: master

    - name: vsp-config
      icon: check-outline
      type: github
      source:
        <<: *github_source
        paths: [proxy-node-vsp-config]

    - name: eidas-config
      type: git
      icon: bugle
      source:
        uri: https://github.com/alphagov/verify-eidas-config.git
        branch: master
        paths: [test]
        username: "re-autom8-ci"
        password: ((github.api-token))

    - name: cloudhsm-config
      type: github
      icon: folder-key-network-outline
      source:
        <<: *github_source
        paths: [cloudhsm]

    - name: release
      type: github-release
      icon: tag
      source:
        <<: *github_source
        tag_filter: ^v2\.\d+$

    - name: chart
      type: registry-image
      icon: file-document
      source: &ecr_source
       username: ((pipeline.ImageRegistryUsername))
       password: ((pipeline.ImageRegistryPassword))
       repository: ((chart.ImageRepositoryURI))

    - name: tests-image
      type: registry-image
      icon: code-tags-check
      source:
        <<: *ecr_source
        repository: ((tests.ImageRepositoryURI))

    - name: gateway-image
      type: registry-image
      icon: gate
      source:
        <<: *ecr_source
        repository: ((gateway.ImageRepositoryURI))

    - name: translator-image
      type: registry-image
      icon: file-xml
      source:
        <<: *ecr_source
        repository: ((translator.ImageRepositoryURI))

    - name: parser-image
      type: registry-image
      icon: page-next
      source:
        <<: *ecr_source
        repository: ((parser.ImageRepositoryURI))

    - name: metatron-image
      type: registry-image
      icon: turtle
      source:
        <<: *ecr_source
        repository: ((metatron.ImageRepositoryURI))

    - name: stub-connector-image
      type: registry-image
      icon: power-plug
      source:
        <<: *ecr_source
        repository: ((stub-connector.ImageRepositoryURI))

    - name: cloudhsm-client-image
      type: registry-image
      icon: folder-key-network
      source:
        <<: *ecr_source
        repository: ((cloudhsm-client.ImageRepositoryURI))

    - name: cloudhsm-jce-image
      type: registry-image
      icon: puzzle
      source:
        <<: *ecr_source
        repository: ((cloudhsm-jce.ImageRepositoryURI))

    - name: verify-service-provider-image
      type: registry-image
      icon: marker-check
      source:
        <<: *ecr_source
        repository: ((verify-service-provider.ImageRepositoryURI))

    - name: nightly
      type: time
      icon: update
      source:
        interval: 1h
        start: 3:00 AM
        stop: 4:00 AM

    groups:
      - name: deployment
        jobs: [build-vsp-image, build-proxy-node, package, test, release, delete]
      - name: proxy-node
        jobs: [build-proxy-node, package, test, release, delete]
      - name: components
        jobs: [build-cloudhsm, build-vsp-image]
      - name: all
        jobs: [build-cloudhsm, build-vsp-image, build-proxy-node, package, test, release, delete]

    jobs:

    - name: build-vsp-image
      serial: true
      serial_groups: [build-vsp]
      plan:
      - in_parallel:
          steps:
          - get: vsp-src
            trigger: true
          - get: vsp-config
            trigger: true

      - task: build-and-test-vsp
        attempts: 2
        config:
          platform: linux
          image_resource: *openjdk_image
          inputs:
          - name: vsp-src
          outputs:
          - name: vsp-src
          caches:
          - *gradle_cache_path
          run:
            path: /bin/sh
            args:
              - -euc
              - |
                cd vsp-src
                rm -f .dockerignore
                export GRADLE_USER_HOME=$(pwd)/home/gradle/.gradle
                ./gradlew --console verbose test installDist

      - task: build-vsp
        privileged: true
        config:
          <<: *build_config
          params:
            CONTEXT: vsp-src
            DOCKERFILE: vsp-config/proxy-node-vsp-config/Dockerfile
          inputs:
          - name: vsp-src
          - name: vsp-config
          outputs:
          - name: image
      - put: verify-service-provider-image
        params:
          <<: *image_put_params
          additional_tags: vsp-config/.git/short_ref

    - name: build-cloudhsm
      serial: true
      serial_groups: [build-proxy-node]
      plan:
      - get: cloudhsm-config
        trigger: true
      - in_parallel:
          fail_fast: true
          steps:
          - do:
            - task: build-cloudhsm
              privileged: true
              config:
                <<: *build_config
                params:
                  CONTEXT: cloudhsm-config/cloudhsm
                inputs:
                - name: cloudhsm-config
                outputs:
                - name: cloudhsm-image-file
                  path: image
            - put: cloudhsm-client-image
              params:
                image: cloudhsm-image-file/image.tar
                additional_tags: cloudhsm-config/.git/short_ref

          - do:
            - task: build-cloudhsm-jce
              privileged: true
              config:
                <<: *build_config
                params:
                  CONTEXT: cloudhsm-config/cloudhsm/jdk-jce-image
                inputs:
                - name: cloudhsm-config
                outputs:
                - name: cloudhsm-jce-image-file
                  path: image
            - put: cloudhsm-jce-image
              params:
                image: cloudhsm-jce-image-file/image.tar
                additional_tags: cloudhsm-config/.git/short_ref
    - name: build-proxy-node
      serial: true
      serial_groups: [build-proxy-node]
      plan:
      - in_parallel:
          steps:
          - get: src
            trigger: true
          - get: cloudhsm-jce-image
            passed: [build-cloudhsm]
            trigger: true

      - task: run-tests
        attempts: 2
        image: cloudhsm-jce-image
        config:
          platform: linux
          inputs:
          - name: src
          outputs:
          - name: gradle-cache
            <<: *gradle_cache_path
          caches:
          - *gradle_cache_path
          run:
            path: /bin/sh
            args:
              - -euc
              - |
                cd src
                export GRADLE_USER_HOME=$(pwd)/home/gradle/.gradle
                ./gradlew --console verbose --parallel -PCI test

      - task: build-apps
        image: cloudhsm-jce-image
        config:
          platform: linux
          inputs:
          - name: src
          - name: gradle-cache
            <<: *gradle_cache_path
          outputs:
          - name: src
          caches:
          - *gradle_cache_path
          run:
            path: /bin/sh
            args:
              - -elc
              - |
                cd src
                export GRADLE_USER_HOME=$(pwd)/home/gradle/.gradle
                ./gradlew --console verbose --parallel -Pcloudhsm -PCI installDist

      - in_parallel:
          fail_fast: true
          steps:
          - do:
            - task: gateway-build
              privileged: true
              config:
                <<: *build_config
                params:
                  CONTEXT: src
                  BUILD_ARG_component: proxy-node-gateway
                inputs:
                - name: src
                outputs:
                - name: gateway-image-file
                  path: image
            - put: gateway-image
              params:
                <<: *image_put_params
                image: gateway-image-file/image.tar

          - do:
            - task: translator-build
              privileged: true
              config:
                <<: *build_config
                params:
                  CONTEXT: src
                  BUILD_ARG_component: proxy-node-translator
                  BUILD_ARG_TALKS_TO_HSM: "true"
                inputs:
                - name: src
                outputs:
                - name: translator-image-file
                  path: image
            - put: translator-image
              params:
                <<: *image_put_params
                image: translator-image-file/image.tar

          - do:
            - task: parser-build
              privileged: true
              config:
                <<: *build_config
                params:
                  CONTEXT: src
                  BUILD_ARG_component: eidas-saml-parser
                inputs:
                - name: src
                outputs:
                - name: parser-image-file
                  path: image
            - put: parser-image
              params:
                <<: *image_put_params
                image: parser-image-file/image.tar

          - do:
            - task: metatron-build
              privileged: true
              config:
                <<: *build_config
                params:
                  CONTEXT: src
                  BUILD_ARG_component: metatron
                inputs:
                - name: src
                outputs:
                - name: metatron-image-file
                  path: image
            - put: metatron-image
              params:
                <<: *image_put_params
                image: metatron-image-file/image.tar

          - do:
            - task: stub-connector-build
              privileged: true
              config:
                <<: *build_config
                params:
                  CONTEXT: src
                  BUILD_ARG_component: stub-connector
                inputs:
                - name: src
                outputs:
                - name: stub-connector-image-file
                  path: image
            - put: stub-connector-image
              params:
                <<: *image_put_params
                image: stub-connector-image-file/image.tar

          - do:
            - task: tests-build
              privileged: true
              config:
                <<: *build_config
                params:
                  CONTEXT: src/proxy-node-acceptance-tests
                inputs:
                - name: src
                outputs:
                - name: tests-image-file
                  path: image
            - put: tests-image
              params:
                <<: *image_put_params
                image: tests-image-file/image.tar

    - name: package
      serial: true
      serial_groups: [package, build-vsp, build-proxy-node]
      plan:
      - in_parallel:
          steps:
          - get: src
            passed: [build-proxy-node]
            trigger: true
          - get: gateway-image
            passed: [build-proxy-node]
            trigger: true
          - get: translator-image
            passed: [build-proxy-node]
            trigger: true
          - get: parser-image
            passed: [build-proxy-node]
            trigger: true
          - get: metatron-image
            passed: [build-proxy-node]
            trigger: true
          - get: stub-connector-image
            passed: [build-proxy-node]
            trigger: true
          - get: verify-service-provider-image
            passed: [build-vsp-image]
            trigger: true
          - get: cloudhsm-client-image
            passed: [build-cloudhsm]
          - get: release

      - task: generate-chart-values
        config:
          platform: linux
          image_resource: *task_toolbox
          inputs:
          - name: src
          - name: gateway-image
          - name: translator-image
          - name: parser-image
          - name: metatron-image
          - name: stub-connector-image
          - name: cloudhsm-client-image
          - name: verify-service-provider-image
          outputs:
          - name: chart-values
          params:
            PARSER_REPOSITORY_URI: ((parser.ImageRepositoryURI))
            METATRON_REPOSITORY_URI: ((metatron.ImageRepositoryURI))
            GATEWAY_REPOSITORY_URI: ((gateway.ImageRepositoryURI))
            TRANSLATOR_REPOSITORY_URI: ((translator.ImageRepositoryURI))
            CLOUDHSM_CLIENT_REPOSITORY_URI: ((cloudhsm-client.ImageRepositoryURI))
            VERIFY_SERIVCE_PROVIDER_REPOSITORY_URI: ((verify-service-provider.ImageRepositoryURI))
            STUB_CONNECTOR_REPOSITORY_URI: ((stub-connector.ImageRepositoryURI))
          run:
            path: /bin/bash
            args:
              - -euc
              - |
                echo "generating helm values for latest image versions..."
                mkdir -p chart-values
                cat << EOF > ./overrides.yaml
                esp:
                  image:
                    repository: $PARSER_REPOSITORY_URI@$(cat parser-image/digest | cut -d ':' -f 1)
                    tag: $(cat parser-image/digest | cut -d ':' -f 2)
                metatron:
                  image:
                    repository: $METATRON_REPOSITORY_URI@$(cat metatron-image/digest | cut -d ':' -f 1)
                    tag: $(cat metatron-image/digest | cut -d ':' -f 2)
                gateway:
                  image:
                    repository: $GATEWAY_REPOSITORY_URI@$(cat gateway-image/digest | cut -d ':' -f 1)
                    tag: $(cat gateway-image/digest | cut -d ':' -f 2)
                translator:
                  image:
                    repository: $TRANSLATOR_REPOSITORY_URI@$(cat translator-image/digest | cut -d ':' -f 1)
                    tag: $(cat translator-image/digest | cut -d ':' -f 2)
                hsm:
                  image:
                    repository: $CLOUDHSM_CLIENT_REPOSITORY_URI@$(cat cloudhsm-client-image/digest | cut -d ':' -f 1)
                    tag: $(cat cloudhsm-client-image/digest | cut -d ':' -f 2)
                vsp:
                  image:
                    repository: $VERIFY_SERIVCE_PROVIDER_REPOSITORY_URI@$(cat verify-service-provider-image/digest | cut -d ':' -f 1)
                    tag: $(cat verify-service-provider-image/digest | cut -d ':' -f 2)
                stubConnector:
                  image:
                    repository: $STUB_CONNECTOR_REPOSITORY_URI@$(cat stub-connector-image/digest | cut -d ':' -f 1)
                    tag: $(cat stub-connector-image/digest | cut -d ':' -f 2)
                EOF
                echo "merging with chart values..."
                spruce merge ./src/chart/values.yaml ./overrides.yaml | tee -a chart-values/values.yaml

      - task: generate-chart-version
        config:
          platform: linux
          image_resource: *task_toolbox
          inputs:
          - name: release
          outputs:
          - name: chart-version
          run:
            path: /bin/bash
            args:
            - -euc
            - |
              echo "Bumping release number..."
              CURRENT_TAG=$(cat release/tag)
              awk -F. '/[0-9]+\./{$NF++;print}' OFS=. <<< "${CURRENT_TAG}" > chart-version/tag
              NEW_TAG=$(cat chart-version/tag)
              echo "${NEW_TAG}" > chart-version/name
              cat chart-version/name

      - task: generate-chart-package
        config:
          platform: linux
          image_resource: *task_toolbox
          inputs:
          - name: src
          - name: chart-version
          - name: chart-values
          outputs:
          - name: proxy-node-chart-package
          params:
            CLUSTER_PRIVATE_KEY: ((artefact-signing-key.privateKey))
          run:
            path: /bin/bash
            args:
            - -euc
            - |
              echo "preparing keyring..."
              echo "${CLUSTER_PRIVATE_KEY}" > key
              gpg --import key
              gpg --export-secret-keys > ~/.gnupg/pubring.gpg
              KEY_ID="$(gpg --list-secret-keys --with-colons  | awk -F: '/uid:/ {print $10}' | head -n1)"
              echo "Building chart with release values..."
              CHART_NAME=$(yq . < ./src/chart/Chart.yaml | jq -r .name)
              cp -r "./src/chart" "./${CHART_NAME}"
              cp "./chart-values/values.yaml" "./${CHART_NAME}/values.yaml"
              mkdir -p proxy-node-chart-package
              APP_VERSION=$(cat ./src/.git/short_ref)
              CHART_VERSION=$(cat ./chart-version/tag)
              echo "generating signed (${KEY_ID}) helm package for ${CHART_NAME} at app-version: '${APP_VERSION}' chart-version: '${CHART_VERSION}'..."
              helm package \
                --app-version "${APP_VERSION}" \
                --version "${CHART_VERSION}" \
                --destination "./proxy-node-chart-package/" \
                --save=false \
                --sign \
                --key "${KEY_ID}" \
                "./${CHART_NAME}"
              cp chart-version/tag proxy-node-chart-package/
              cp ./src/.git/ref proxy-node-chart-package/

      - task: build-chart-package-image
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
            version:
              digest: sha256:cfb2983956145f54a4996c2aff5fc598856c8722922a6e73f9ebfa3d9b3f9813
          caches:
          - path: cache
          inputs:
          - name: proxy-node-chart-package
          outputs:
          - name: chart-image-file
            path: image
          run:
            path: /bin/ash
            args:
            - -euc
            - |
              echo -e "FROM alpine:3" > ./Dockerfile
              echo -e "COPY proxy-node-chart-package /proxy-node-chart-package/" >> ./Dockerfile
              CONTEXT=. build

      - put: chart
        params:
          image: chart-image-file/image.tar
          additional_tags: src/.git/short_ref

    - name: delete
      serial: true
      serial_groups: [package]
      plan:
      - get: nightly
        trigger: true
      - get: chart
        passed: [package]
        trigger: true

      - task: delete-test-release
        timeout: 10m
        config:
          platform: linux
          image_resource: *task_toolbox
          params:
            KUBERNETES_SERVICE_ACCOUNT: ((namespace-deployer))
            KUBERNETES_TOKEN: ((namespace-deployer.token))
            KUBERNETES_API: kubernetes.default.svc
            RELEASE_NAMESPACE: ((namespace-deployer.namespace))
            RELEASE_NAME: test
            APP_NAME: proxy-node
          run:
            path: /bin/bash
            args:
              - -euc
              - |
                echo "Configuring kubectl"
                echo "${KUBERNETES_SERVICE_ACCOUNT}" | jq -r .["ca.crt"] > ca.crt
                kubectl config set-cluster self --server=https://kubernetes.default --certificate-authority=ca.crt
                kubectl config set-credentials deployer --token "${KUBERNETES_TOKEN}"
                kubectl config set-context deployer --user deployer --cluster self
                kubectl config use-context deployer

                echo "Deleting app ${RELEASE_NAME}-${APP_NAME} in namespace${RELEASE_NAMESPACE}"
                kapp delete \
                  -y \
                  --namespace "${RELEASE_NAMESPACE}" \
                  --app "${RELEASE_NAME}-${APP_NAME}"

    - name: test
      serial: true
      serial_groups: [package]
      plan:

      - in_parallel:
          steps:
          - get: chart
            passed: [delete]
            trigger: true
          - get: tests-image
            passed: [build-proxy-node]
          - get: eidas-config
            trigger: true

      - task: generate-config
        config:
          platform: linux
          image_resource: *openjdk_image
          inputs:
            - name: eidas-config
          outputs:
            - name: eidas-config
          run:
            dir: eidas-config/tools
            path: ./gradlew
            args:
              - run
              - --args
              - "generate-config --environment=test"

      - task: create-config-map
        config:
          platform: linux
          image_resource: *task_toolbox
          inputs:
            - name: eidas-config
          outputs:
            - name: manifests
          params:
            KUBERNETES_SERVICE_ACCOUNT: ((namespace-deployer))
            KUBERNETES_TOKEN: ((namespace-deployer.token))
            NAMESPACE: ((namespace-deployer.namespace))
          run:
            path: /bin/sh
            args:
              - -euc
              - |
                cd eidas-config/tools

                echo "configuring kubectl"
                echo "${KUBERNETES_SERVICE_ACCOUNT}" | jq -r .["ca.crt"] > ca.crt
                kubectl config set-cluster self --server=https://kubernetes.default --certificate-authority=ca.crt
                kubectl config set-credentials deployer --token "${KUBERNETES_TOKEN}"
                kubectl config set-context deployer --user deployer --cluster self
                kubectl config use-context deployer

                echo "generating configMap resource definition from file"
                kubectl -n "${NAMESPACE}" create configmap test-countries-config --from-file=countriesConfig.yaml -o yaml --dry-run \
                  | yq -y '.metadata += {"annotations": {"kapp.k14s.io/versioned": "", "kapp.k14s.io/num-versions":"5"}}' \
                  | tee ../../manifests/countriesConfigMap.yaml

      - task: extract-chart
        image: chart
        config:
          platform: linux
          outputs:
          - name: chart
          run:
            path: /bin/sh
            args:
            - -euc
            - |
              echo "Extracting chart package from the release image..."
              cp -r /proxy-node-chart-package/* chart/

      - task: render-chart-package
        config:
          platform: linux
          image_resource: *task_toolbox
          inputs:
          - name: chart
          - name: manifests
          outputs:
          - name: manifests
          params:
            CLUSTER_NAME: ((cluster.name))
            CLUSTER_DOMAIN: ((cluster.domain))
            CLUSTER_PUBLIC_KEY: ((artefact-signing-key.publicKey))
            RELEASE_NAMESPACE: ((namespace-deployer.namespace))
            RELEASE_NAME: test
            CLOUDHSM_IP: ((cluster.cloudHsmIp))
          run:
            path: /bin/bash
            args:
            - -euc
            - |
              echo "Preparing keyring..."
              echo "${CLUSTER_PUBLIC_KEY}" > key
              gpg --import key
              gpg --export > ~/.gnupg/pubring.gpg
              echo "Verifying package signature..."
              helm verify ./chart/*.tgz
              echo "OK!"
              echo "Rendering chart with release name '${RELEASE_NAME}' and namespace '${RELEASE_NAMESPACE}'..."
              helm template \
                --name "${RELEASE_NAME}" \
                --namespace "${RELEASE_NAMESPACE}" \
                --set "global.cluster.name=${CLUSTER_NAME}" \
                --set "global.cluster.domain=${CLUSTER_DOMAIN}" \
                --set "global.cloudHsm.ip=${CLOUDHSM_IP}" \
                --set "stubConnector.enabled=true" \
                --set "vsp.secretName=vsp" \
                --output-dir "./manifests/" \
                ./chart/*.tgz

      - task: deploy-chart-package
        timeout: 10m
        config:
          platform: linux
          image_resource: *task_toolbox
          inputs:
          - name: manifests
          params:
            KUBERNETES_SERVICE_ACCOUNT: ((namespace-deployer))
            KUBERNETES_TOKEN: ((namespace-deployer.token))
            KUBERNETES_API: kubernetes.default.svc
            RELEASE_NAMESPACE: ((namespace-deployer.namespace))
            RELEASE_NAME: test
            APP_NAME: proxy-node
          run:
            path: /bin/bash
            args:
            - -euc
            - |
              echo "Configuring kubectl"
              echo "${KUBERNETES_SERVICE_ACCOUNT}" | jq -r .["ca.crt"] > ca.crt
              kubectl config set-cluster self --server=https://kubernetes.default --certificate-authority=ca.crt
              kubectl config set-credentials deployer --token "${KUBERNETES_TOKEN}"
              kubectl config set-context deployer --user deployer --cluster self
              kubectl config use-context deployer

              echo "Applying chart to ${RELEASE_NAMESPACE} namespace..."
              kapp deploy \
                -y \
                --namespace "${RELEASE_NAMESPACE}" \
                --allow-ns "${RELEASE_NAMESPACE}" \
                --app "${RELEASE_NAME}-${APP_NAME}" \
                --diff-changes \
                -f ./manifests/

      - task: test-chart-package
        image: tests-image
        attempts: 2
        timeout: 5m
        config:
          platform: linux
          params:
            PROXY_NODE_URL: "https://proxy-node.eidas.test.((cluster.domain))"
            STUB_CONNECTOR_URL: "https://stub-connector.eidas.test.((cluster.domain))"
            STUB_IDP_USER: "stub-idp-demo-one"
            SELENIUM_HUB_URL: "https://selenium.tools.signin.service.gov.uk/wd/hub"
          run:
            path: /bin/bash
            args:
            - -euc
            - |
              cd /
              bundle exec cucumber --strict --tags "not @ignore"

    - name: release
      serial: true
      serial_groups: [package]
      plan:

      - get: chart
        passed: [test]
        trigger: true

      - task: extract-chart
        image: chart
        config:
          platform: linux
          outputs:
          - name: chart
          run:
            path: /bin/sh
            args:
            - -euc
            - |
              echo "Extracting chart package from the release image..."
              cp -r /proxy-node-chart-package/* chart/

      - put: release
        params:
          name: chart/tag
          tag: chart/tag
          commitish: chart/ref
          globs:
          - chart/*.tgz*
